"""
# Recursive Decimal to Binary

Write a recursive function that converts a non-negative decimal number to binary.

Treat 0 and 1 as base cases which return a string containing the appropriate digit. 

For all other positive integers, n, you should compute the next digit using the remainder operator and then make a recursive call to compute the digits of n // 2.

 Finally, you should concatenate the result of the recursive call (which will be a string) and the next digit (which you will need to convert to a string) and return this string as the result of the function.
 
Write a main program that uses your recursive function to convert a non-negative integer entered by the user from decimal to binary. Your program should display an appropriate error message if the user enters a negative value.

 	 	 	 			 
# Documentation

For this project solution you may use:

- Recursion
- Lists
- Objects (Dictionaries in Python)
- Functions
- Conditionals
- Repetitions

Additional contents:

- [Python: RECURSION Explained (video)](https://www.youtube.com/watch?v=wMNrSM5RFMc)
- [Recursion for Beginners: A Beginner's Guide to Recursion (video)](https://www.youtube.com/watch?v=AfBqVVKg4GE)
- [Recursion, the Fibonacci Sequence and Memoization (video)](https://www.youtube.com/watch?v=Qk0zUZW-U_M)

# Deadline

This project requires to be completed in a maximum of **2 hours**

"""

numeri = [15, 7, 8, 4, 1, 0]


def decimal_to_binary_internal(num_dec: int, bin_string=""):

    quoziente = num_dec // 2
    resto = num_dec % 2

    bin_string = str(resto)+bin_string
    print(f"entro con: {num_dec}, quoziente {quoziente} resto {resto}")

    if quoziente == 0:
        print(f"esco dalla ricorsione con quoziente {quoziente} resto {resto}")
        return quoziente, resto, bin_string

    return decimal_to_binary_internal(quoziente, bin_string)


def dec_to_binary(num_dec: int):
    _, _, bin_string = decimal_to_binary_internal(numero)
    # print(f"_ è {_}'")
    binario = int(bin_string)
    return binario


for numero in numeri:
    print("-"*50)
    binario = dec_to_binary(numero)
    print(f"{numero} in binario è: {binario}\n")
